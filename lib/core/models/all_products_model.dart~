// To parse this JSON data, do
//
//     final allProductsModel = allProductsModelFromJson(jsonString);

import 'dart:convert';

List<AllProductsModel> allProductsModelFromJson(String str) => List<AllProductsModel>.from(json.decode(str).map((x) => AllProductsModel.fromJson(x)));

String allProductsModelToJson(List<AllProductsModel> data) => json.encode(List<dynamic>.from(data.map((x) => x.toJson())));

class AllProductsModel {
  int id;
  String name;
  String slug;
  String permalink;
  DateTime dateCreated;
  DateTime dateCreatedGmt;
  DateTime dateModified;
  DateTime dateModifiedGmt;
  String type;
  String status;
  bool featured;
  String catalogVisibility;
  String description;
  String shortDescription;
  String sku;
  String price;
  String regularPrice;
  String salePrice;
  dynamic dateOnSaleFrom;
  dynamic dateOnSaleFromGmt;
  dynamic dateOnSaleTo;
  dynamic dateOnSaleToGmt;
  bool onSale;
  bool purchasable;
  int totalSales;
  bool virtual;
  bool downloadable;
  List<dynamic> downloads;
  int downloadLimit;
  int downloadExpiry;
  String externalUrl;
  String buttonText;
  String taxStatus;
  String taxClass;
  bool manageStock;
  dynamic stockQuantity;
  String backorders;
  bool backordersAllowed;
  bool backordered;
  dynamic lowStockAmount;
  bool soldIndividually;
  String weight;
  Dimensions dimensions;
  bool shippingRequired;
  bool shippingTaxable;
  String shippingClass;
  int shippingClassId;
  bool reviewsAllowed;
  String averageRating;
  int ratingCount;
  List<dynamic> upsellIds;
  List<dynamic> crossSellIds;
  int parentId;
  String purchaseNote;
  List<Category> categories;
  List<Category> tags;
  List<Image> images;
  List<dynamic> attributes;
  List<dynamic> defaultAttributes;
  List<dynamic> variations;
  List<dynamic> groupedProducts;
  int menuOrder;
  String priceHtml;
  List<int> relatedIds;
  List<MetaDatum> metaData;
  String stockStatus;
  bool hasOptions;
  String postPassword;
  String globalUniqueId;
  int amsDefaultVariationId;
  List<dynamic> amsProductPointsReward;
  double amsProductDiscountPercentage;
  double amsPriceToDisplay;
  List<dynamic> amsAcf;
  String yoastHead;
  YoastHeadJson yoastHeadJson;
  Links links;

  AllProductsModel({
    required this.id,
    required this.name,
    required this.slug,
    required this.permalink,
    required this.dateCreated,
    required this.dateCreatedGmt,
    required this.dateModified,
    required this.dateModifiedGmt,
    required this.type,
    required this.status,
    required this.featured,
    required this.catalogVisibility,
    required this.description,
    required this.shortDescription,
    required this.sku,
    required this.price,
    required this.regularPrice,
    required this.salePrice,
    required this.dateOnSaleFrom,
    required this.dateOnSaleFromGmt,
    required this.dateOnSaleTo,
    required this.dateOnSaleToGmt,
    required this.onSale,
    required this.purchasable,
    required this.totalSales,
    required this.virtual,
    required this.downloadable,
    required this.downloads,
    required this.downloadLimit,
    required this.downloadExpiry,
    required this.externalUrl,
    required this.buttonText,
    required this.taxStatus,
    required this.taxClass,
    required this.manageStock,
    required this.stockQuantity,
    required this.backorders,
    required this.backordersAllowed,
    required this.backordered,
    required this.lowStockAmount,
    required this.soldIndividually,
    required this.weight,
    required this.dimensions,
    required this.shippingRequired,
    required this.shippingTaxable,
    required this.shippingClass,
    required this.shippingClassId,
    required this.reviewsAllowed,
    required this.averageRating,
    required this.ratingCount,
    required this.upsellIds,
    required this.crossSellIds,
    required this.parentId,
    required this.purchaseNote,
    required this.categories,
    required this.tags,
    required this.images,
    required this.attributes,
    required this.defaultAttributes,
    required this.variations,
    required this.groupedProducts,
    required this.menuOrder,
    required this.priceHtml,
    required this.relatedIds,
    required this.metaData,
    required this.stockStatus,
    required this.hasOptions,
    required this.postPassword,
    required this.globalUniqueId,
    required this.amsDefaultVariationId,
    required this.amsProductPointsReward,
    required this.amsProductDiscountPercentage,
    required this.amsPriceToDisplay,
    required this.amsAcf,
    required this.yoastHead,
    required this.yoastHeadJson,
    required this.links,
  });

  factory AllProductsModel.fromJson(Map<String, dynamic> json) => AllProductsModel(
    id: json["id"],
    name: json["name"],
    slug: json["slug"],
    permalink: json["permalink"],
    dateCreated: DateTime.parse(json["date_created"]),
    dateCreatedGmt: DateTime.parse(json["date_created_gmt"]),
    dateModified: DateTime.parse(json["date_modified"]),
    dateModifiedGmt: DateTime.parse(json["date_modified_gmt"]),
    type: json["type"],
    status: json["status"],
    featured: json["featured"],
    catalogVisibility: json["catalog_visibility"],
    description: json["description"],
    shortDescription: json["short_description"],
    sku: json["sku"],
    price: json["price"],
    regularPrice: json["regular_price"],
    salePrice: json["sale_price"],
    dateOnSaleFrom: json["date_on_sale_from"],
    dateOnSaleFromGmt: json["date_on_sale_from_gmt"],
    dateOnSaleTo: json["date_on_sale_to"],
    dateOnSaleToGmt: json["date_on_sale_to_gmt"],
    onSale: json["on_sale"],
    purchasable: json["purchasable"],
    totalSales: json["total_sales"],
    virtual: json["virtual"],
    downloadable: json["downloadable"],
    downloads: List<dynamic>.from(json["downloads"].map((x) => x)),
    downloadLimit: json["download_limit"],
    downloadExpiry: json["download_expiry"],
    externalUrl: json["external_url"],
    buttonText: json["button_text"],
    taxStatus: json["tax_status"],
    taxClass: json["tax_class"],
    manageStock: json["manage_stock"],
    stockQuantity: json["stock_quantity"],
    backorders: json["backorders"],
    backordersAllowed: json["backorders_allowed"],
    backordered: json["backordered"],
    lowStockAmount: json["low_stock_amount"],
    soldIndividually: json["sold_individually"],
    weight: json["weight"],
    dimensions: Dimensions.fromJson(json["dimensions"]),
    shippingRequired: json["shipping_required"],
    shippingTaxable: json["shipping_taxable"],
    shippingClass: json["shipping_class"],
    shippingClassId: json["shipping_class_id"],
    reviewsAllowed: json["reviews_allowed"],
    averageRating: json["average_rating"],
    ratingCount: json["rating_count"],
    upsellIds: List<dynamic>.from(json["upsell_ids"].map((x) => x)),
    crossSellIds: List<dynamic>.from(json["cross_sell_ids"].map((x) => x)),
    parentId: json["parent_id"],
    purchaseNote: json["purchase_note"],
    categories: List<Category>.from(json["categories"].map((x) => Category.fromJson(x))),
    tags: List<Category>.from(json["tags"].map((x) => Category.fromJson(x))),
    images: List<Image>.from(json["images"].map((x) => Image.fromJson(x))),
    attributes: List<dynamic>.from(json["attributes"].map((x) => x)),
    defaultAttributes: List<dynamic>.from(json["default_attributes"].map((x) => x)),
    variations: List<dynamic>.from(json["variations"].map((x) => x)),
    groupedProducts: List<dynamic>.from(json["grouped_products"].map((x) => x)),
    menuOrder: json["menu_order"],
    priceHtml: json["price_html"],
    relatedIds: List<int>.from(json["related_ids"].map((x) => x)),
    metaData: List<MetaDatum>.from(json["meta_data"].map((x) => MetaDatum.fromJson(x))),
    stockStatus: json["stock_status"],
    hasOptions: json["has_options"],
    postPassword: json["post_password"],
    globalUniqueId: json["global_unique_id"],
    amsDefaultVariationId: json["ams_default_variation_id"],
    amsProductPointsReward: List<dynamic>.from(json["ams_product_points_reward"].map((x) => x)),
    amsProductDiscountPercentage: json["ams_product_discount_percentage"]?.toDouble(),
    amsPriceToDisplay: json["ams_price_to_display"]?.toDouble(),
    amsAcf: List<dynamic>.from(json["ams_acf"].map((x) => x)),
    yoastHead: json["yoast_head"],
    yoastHeadJson: YoastHeadJson.fromJson(json["yoast_head_json"]),
    links: Links.fromJson(json["_links"]),
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "name": name,
    "slug": slug,
    "permalink": permalink,
    "date_created": dateCreated.toIso8601String(),
    "date_created_gmt": dateCreatedGmt.toIso8601String(),
    "date_modified": dateModified.toIso8601String(),
    "date_modified_gmt": dateModifiedGmt.toIso8601String(),
    "type": type,
    "status": status,
    "featured": featured,
    "catalog_visibility": catalogVisibility,
    "description": description,
    "short_description": shortDescription,
    "sku": sku,
    "price": price,
    "regular_price": regularPrice,
    "sale_price": salePrice,
    "date_on_sale_from": dateOnSaleFrom,
    "date_on_sale_from_gmt": dateOnSaleFromGmt,
    "date_on_sale_to": dateOnSaleTo,
    "date_on_sale_to_gmt": dateOnSaleToGmt,
    "on_sale": onSale,
    "purchasable": purchasable,
    "total_sales": totalSales,
    "virtual": virtual,
    "downloadable": downloadable,
    "downloads": List<dynamic>.from(downloads.map((x) => x)),
    "download_limit": downloadLimit,
    "download_expiry": downloadExpiry,
    "external_url": externalUrl,
    "button_text": buttonText,
    "tax_status": taxStatus,
    "tax_class": taxClass,
    "manage_stock": manageStock,
    "stock_quantity": stockQuantity,
    "backorders": backorders,
    "backorders_allowed": backordersAllowed,
    "backordered": backordered,
    "low_stock_amount": lowStockAmount,
    "sold_individually": soldIndividually,
    "weight": weight,
    "dimensions": dimensions.toJson(),
    "shipping_required": shippingRequired,
    "shipping_taxable": shippingTaxable,
    "shipping_class": shippingClass,
    "shipping_class_id": shippingClassId,
    "reviews_allowed": reviewsAllowed,
    "average_rating": averageRating,
    "rating_count": ratingCount,
    "upsell_ids": List<dynamic>.from(upsellIds.map((x) => x)),
    "cross_sell_ids": List<dynamic>.from(crossSellIds.map((x) => x)),
    "parent_id": parentId,
    "purchase_note": purchaseNote,
    "categories": List<dynamic>.from(categories.map((x) => x.toJson())),
    "tags": List<dynamic>.from(tags.map((x) => x.toJson())),
    "images": List<dynamic>.from(images.map((x) => x.toJson())),
    "attributes": List<dynamic>.from(attributes.map((x) => x)),
    "default_attributes": List<dynamic>.from(defaultAttributes.map((x) => x)),
    "variations": List<dynamic>.from(variations.map((x) => x)),
    "grouped_products": List<dynamic>.from(groupedProducts.map((x) => x)),
    "menu_order": menuOrder,
    "price_html": priceHtml,
    "related_ids": List<dynamic>.from(relatedIds.map((x) => x)),
    "meta_data": List<dynamic>.from(metaData.map((x) => x.toJson())),
    "stock_status": stockStatus,
    "has_options": hasOptions,
    "post_password": postPassword,
    "global_unique_id": globalUniqueId,
    "ams_default_variation_id": amsDefaultVariationId,
    "ams_product_points_reward": List<dynamic>.from(amsProductPointsReward.map((x) => x)),
    "ams_product_discount_percentage": amsProductDiscountPercentage,
    "ams_price_to_display": amsPriceToDisplay,
    "ams_acf": List<dynamic>.from(amsAcf.map((x) => x)),
    "yoast_head": yoastHead,
    "yoast_head_json": yoastHeadJson.toJson(),
    "_links": links.toJson(),
  };
}

class Category {
  int id;
  String name;
  String slug;

  Category({
    required this.id,
    required this.name,
    required this.slug,
  });

  factory Category.fromJson(Map<String, dynamic> json) => Category(
    id: json["id"],
    name: json["name"],
    slug: json["slug"],
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "name": name,
    "slug": slug,
  };
}

class Dimensions {
  String length;
  String width;
  String height;

  Dimensions({
    required this.length,
    required this.width,
    required this.height,
  });

  factory Dimensions.fromJson(Map<String, dynamic> json) => Dimensions(
    length: json["length"],
    width: json["width"],
    height: json["height"],
  );

  Map<String, dynamic> toJson() => {
    "length": length,
    "width": width,
    "height": height,
  };
}

class Image {
  int id;
  DateTime dateCreated;
  DateTime dateCreatedGmt;
  DateTime dateModified;
  DateTime dateModifiedGmt;
  String src;
  String name;
  String alt;
  String thumbnail;
  String medium;

  Image({
    required this.id,
    required this.dateCreated,
    required this.dateCreatedGmt,
    required this.dateModified,
    required this.dateModifiedGmt,
    required this.src,
    required this.name,
    required this.alt,
    required this.thumbnail,
    required this.medium,
  });

  factory Image.fromJson(Map<String, dynamic> json) => Image(
    id: json["id"],
    dateCreated: DateTime.parse(json["date_created"]),
    dateCreatedGmt: DateTime.parse(json["date_created_gmt"]),
    dateModified: DateTime.parse(json["date_modified"]),
    dateModifiedGmt: DateTime.parse(json["date_modified_gmt"]),
    src: json["src"],
    name: json["name"],
    alt: json["alt"],
    thumbnail: json["thumbnail"],
    medium: json["medium"],
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "date_created": dateCreated.toIso8601String(),
    "date_created_gmt": dateCreatedGmt.toIso8601String(),
    "date_modified": dateModified.toIso8601String(),
    "date_modified_gmt": dateModifiedGmt.toIso8601String(),
    "src": src,
    "name": name,
    "alt": alt,
    "thumbnail": thumbnail,
    "medium": medium,
  };
}

class Links {
  List<Collection> self;
  List<Collection> collection;

  Links({
    required this.self,
    required this.collection,
  });

  factory Links.fromJson(Map<String, dynamic> json) => Links(
    self: List<Collection>.from(json["self"].map((x) => Collection.fromJson(x))),
    collection: List<Collection>.from(json["collection"].map((x) => Collection.fromJson(x))),
  );

  Map<String, dynamic> toJson() => {
    "self": List<dynamic>.from(self.map((x) => x.toJson())),
    "collection": List<dynamic>.from(collection.map((x) => x.toJson())),
  };
}

class Collection {
  String href;

  Collection({
    required this.href,
  });

  factory Collection.fromJson(Map<String, dynamic> json) => Collection(
    href: json["href"],
  );

  Map<String, dynamic> toJson() => {
    "href": href,
  };
}

class MetaDatum {
  int id;
  String key;
  dynamic value;

  MetaDatum({
    required this.id,
    required this.key,
    required this.value,
  });

  factory MetaDatum.fromJson(Map<String, dynamic> json) => MetaDatum(
    id: json["id"],
    key: json["key"],
    value: json["value"],
  );

  Map<String, dynamic> toJson() => {
    "id": id,
    "key": key,
    "value": value,
  };
}

class ValueValue {
  String videoType;
  String uploadVideoId;
  String uploadVideoUrl;
  String youtubeUrl;
  String vimeoUrl;
  String autoplay;
  String videoSize;
  String videoControl;
  String hideGalleryImg;
  String hideInformation;
  String audioStatus;

  ValueValue({
    required this.videoType,
    required this.uploadVideoId,
    required this.uploadVideoUrl,
    required this.youtubeUrl,
    required this.vimeoUrl,
    required this.autoplay,
    required this.videoSize,
    required this.videoControl,
    required this.hideGalleryImg,
    required this.hideInformation,
    required this.audioStatus,
  });

  factory ValueValue.fromJson(Map<String, dynamic> json) => ValueValue(
    videoType: json["video_type"],
    uploadVideoId: json["upload_video_id"],
    uploadVideoUrl: json["upload_video_url"],
    youtubeUrl: json["youtube_url"],
    vimeoUrl: json["vimeo_url"],
    autoplay: json["autoplay"],
    videoSize: json["video_size"],
    videoControl: json["video_control"],
    hideGalleryImg: json["hide_gallery_img"],
    hideInformation: json["hide_information"],
    audioStatus: json["audio_status"],
  );

  Map<String, dynamic> toJson() => {
    "video_type": videoType,
    "upload_video_id": uploadVideoId,
    "upload_video_url": uploadVideoUrl,
    "youtube_url": youtubeUrl,
    "vimeo_url": vimeoUrl,
    "autoplay": autoplay,
    "video_size": videoSize,
    "video_control": videoControl,
    "hide_gallery_img": hideGalleryImg,
    "hide_information": hideInformation,
    "audio_status": audioStatus,
  };
}

class YoastHeadJson {
  String title;
  String description;
  Robots robots;
  String canonical;
  String ogLocale;
  String ogType;
  String ogTitle;
  String ogDescription;
  String ogUrl;
  String ogSiteName;
  DateTime? articleModifiedTime;
  List<OgImage> ogImage;
  String twitterCard;
  TwitterMisc twitterMisc;
  Schema schema;

  YoastHeadJson({
    required this.title,
    required this.description,
    required this.robots,
    required this.canonical,
    required this.ogLocale,
    required this.ogType,
    required this.ogTitle,
    required this.ogDescription,
    required this.ogUrl,
    required this.ogSiteName,
    this.articleModifiedTime,
    required this.ogImage,
    required this.twitterCard,
    required this.twitterMisc,
    required this.schema,
  });

  factory YoastHeadJson.fromJson(Map<String, dynamic> json) => YoastHeadJson(
    title: json["title"],
    description: json["description"],
    robots: Robots.fromJson(json["robots"]),
    canonical: json["canonical"],
    ogLocale: json["og_locale"],
    ogType: json["og_type"],
    ogTitle: json["og_title"],
    ogDescription: json["og_description"],
    ogUrl: json["og_url"],
    ogSiteName: json["og_site_name"],
    articleModifiedTime: json["article_modified_time"] == null ? null : DateTime.parse(json["article_modified_time"]),
    ogImage: List<OgImage>.from(json["og_image"].map((x) => OgImage.fromJson(x))),
    twitterCard: json["twitter_card"],
    twitterMisc: TwitterMisc.fromJson(json["twitter_misc"]),
    schema: Schema.fromJson(json["schema"]),
  );

  Map<String, dynamic> toJson() => {
    "title": title,
    "description": description,
    "robots": robots.toJson(),
    "canonical": canonical,
    "og_locale": ogLocale,
    "og_type": ogType,
    "og_title": ogTitle,
    "og_description": ogDescription,
    "og_url": ogUrl,
    "og_site_name": ogSiteName,
    "article_modified_time": articleModifiedTime?.toIso8601String(),
    "og_image": List<dynamic>.from(ogImage.map((x) => x.toJson())),
    "twitter_card": twitterCard,
    "twitter_misc": twitterMisc.toJson(),
    "schema": schema.toJson(),
  };
}

class OgImage {
  int width;
  int height;
  String url;
  String type;

  OgImage({
    required this.width,
    required this.height,
    required this.url,
    required this.type,
  });

  factory OgImage.fromJson(Map<String, dynamic> json) => OgImage(
    width: json["width"],
    height: json["height"],
    url: json["url"],
    type: json["type"],
  );

  Map<String, dynamic> toJson() => {
    "width": width,
    "height": height,
    "url": url,
    "type": type,
  };
}

class Robots {
  String index;
  String follow;
  String maxSnippet;
  String maxImagePreview;
  String maxVideoPreview;

  Robots({
    required this.index,
    required this.follow,
    required this.maxSnippet,
    required this.maxImagePreview,
    required this.maxVideoPreview,
  });

  factory Robots.fromJson(Map<String, dynamic> json) => Robots(
    index: json["index"],
    follow: json["follow"],
    maxSnippet: json["max-snippet"],
    maxImagePreview: json["max-image-preview"],
    maxVideoPreview: json["max-video-preview"],
  );

  Map<String, dynamic> toJson() => {
    "index": index,
    "follow": follow,
    "max-snippet": maxSnippet,
    "max-image-preview": maxImagePreview,
    "max-video-preview": maxVideoPreview,
  };
}

class Schema {
  String context;
  List<Graph> graph;

  Schema({
    required this.context,
    required this.graph,
  });

  factory Schema.fromJson(Map<String, dynamic> json) => Schema(
    context: json["@context"],
    graph: List<Graph>.from(json["@graph"].map((x) => Graph.fromJson(x))),
  );

  Map<String, dynamic> toJson() => {
    "@context": context,
    "@graph": List<dynamic>.from(graph.map((x) => x.toJson())),
  };
}

class Graph {
  String type;
  String id;
  String? url;
  String? name;
  Breadcrumb? isPartOf;
  Breadcrumb? primaryImageOfPage;
  Breadcrumb? image;
  String? thumbnailUrl;
  DateTime? datePublished;
  DateTime? dateModified;
  String? description;
  Breadcrumb? breadcrumb;
  String? inLanguage;
  List<PotentialAction>? potentialAction;
  String? contentUrl;
  int? width;
  int? height;
  List<ItemListElement>? itemListElement;
  Breadcrumb? publisher;
  String? alternateName;
  Logo? logo;
  String? caption;

  Graph({
    required this.type,
    required this.id,
    this.url,
    this.name,
    this.isPartOf,
    this.primaryImageOfPage,
    this.image,
    this.thumbnailUrl,
    this.datePublished,
    this.dateModified,
    this.description,
    this.breadcrumb,
    this.inLanguage,
    this.potentialAction,
    this.contentUrl,
    this.width,
    this.height,
    this.itemListElement,
    this.publisher,
    this.alternateName,
    this.logo,
    this.caption,
  });

  factory Graph.fromJson(Map<String, dynamic> json) => Graph(
    type: json["@type"],
    id: json["@id"],
    url: json["url"],
    name: json["name"],
    isPartOf: json["isPartOf"] == null ? null : Breadcrumb.fromJson(json["isPartOf"]),
    primaryImageOfPage: json["primaryImageOfPage"] == null ? null : Breadcrumb.fromJson(json["primaryImageOfPage"]),
    image: json["image"] == null ? null : Breadcrumb.fromJson(json["image"]),
    thumbnailUrl: json["thumbnailUrl"],
    datePublished: json["datePublished"] == null ? null : DateTime.parse(json["datePublished"]),
    dateModified: json["dateModified"] == null ? null : DateTime.parse(json["dateModified"]),
    description: json["description"],
    breadcrumb: json["breadcrumb"] == null ? null : Breadcrumb.fromJson(json["breadcrumb"]),
    inLanguage: json["inLanguage"],
    potentialAction: json["potentialAction"] == null ? [] : List<PotentialAction>.from(json["potentialAction"]!.map((x) => PotentialAction.fromJson(x))),
    contentUrl: json["contentUrl"],
    width: json["width"],
    height: json["height"],
    itemListElement: json["itemListElement"] == null ? [] : List<ItemListElement>.from(json["itemListElement"]!.map((x) => ItemListElement.fromJson(x))),
    publisher: json["publisher"] == null ? null : Breadcrumb.fromJson(json["publisher"]),
    alternateName: json["alternateName"],
    logo: json["logo"] == null ? null : Logo.fromJson(json["logo"]),
    caption: json["caption"],
  );

  Map<String, dynamic> toJson() => {
    "@type": type,
    "@id": id,
    "url": url,
    "name": name,
    "isPartOf": isPartOf?.toJson(),
    "primaryImageOfPage": primaryImageOfPage?.toJson(),
    "image": image?.toJson(),
    "thumbnailUrl": thumbnailUrl,
    "datePublished": datePublished?.toIso8601String(),
    "dateModified": dateModified?.toIso8601String(),
    "description": description,
    "breadcrumb": breadcrumb?.toJson(),
    "inLanguage": inLanguage,
    "potentialAction": potentialAction == null ? [] : List<dynamic>.from(potentialAction!.map((x) => x.toJson())),
    "contentUrl": contentUrl,
    "width": width,
    "height": height,
    "itemListElement": itemListElement == null ? [] : List<dynamic>.from(itemListElement!.map((x) => x.toJson())),
    "publisher": publisher?.toJson(),
    "alternateName": alternateName,
    "logo": logo?.toJson(),
    "caption": caption,
  };
}

class Breadcrumb {
  String id;

  Breadcrumb({
    required this.id,
  });

  factory Breadcrumb.fromJson(Map<String, dynamic> json) => Breadcrumb(
    id: json["@id"],
  );

  Map<String, dynamic> toJson() => {
    "@id": id,
  };
}

class ItemListElement {
  String type;
  int position;
  String name;
  String? item;

  ItemListElement({
    required this.type,
    required this.position,
    required this.name,
    this.item,
  });

  factory ItemListElement.fromJson(Map<String, dynamic> json) => ItemListElement(
    type: json["@type"],
    position: json["position"],
    name: json["name"],
    item: json["item"],
  );

  Map<String, dynamic> toJson() => {
    "@type": type,
    "position": position,
    "name": name,
    "item": item,
  };
}

class Logo {
  String type;
  String inLanguage;
  String id;
  String url;
  String contentUrl;
  int width;
  int height;
  String caption;

  Logo({
    required this.type,
    required this.inLanguage,
    required this.id,
    required this.url,
    required this.contentUrl,
    required this.width,
    required this.height,
    required this.caption,
  });

  factory Logo.fromJson(Map<String, dynamic> json) => Logo(
    type: json["@type"],
    inLanguage: json["inLanguage"],
    id: json["@id"],
    url: json["url"],
    contentUrl: json["contentUrl"],
    width: json["width"],
    height: json["height"],
    caption: json["caption"],
  );

  Map<String, dynamic> toJson() => {
    "@type": type,
    "inLanguage": inLanguage,
    "@id": id,
    "url": url,
    "contentUrl": contentUrl,
    "width": width,
    "height": height,
    "caption": caption,
  };
}

class PotentialAction {
  String type;
  dynamic target;
  QueryInput? queryInput;

  PotentialAction({
    required this.type,
    required this.target,
    this.queryInput,
  });

  factory PotentialAction.fromJson(Map<String, dynamic> json) => PotentialAction(
    type: json["@type"],
    target: json["target"],
    queryInput: json["query-input"] == null ? null : QueryInput.fromJson(json["query-input"]),
  );

  Map<String, dynamic> toJson() => {
    "@type": type,
    "target": target,
    "query-input": queryInput?.toJson(),
  };
}

class QueryInput {
  String type;
  bool valueRequired;
  String valueName;

  QueryInput({
    required this.type,
    required this.valueRequired,
    required this.valueName,
  });

  factory QueryInput.fromJson(Map<String, dynamic> json) => QueryInput(
    type: json["@type"],
    valueRequired: json["valueRequired"],
    valueName: json["valueName"],
  );

  Map<String, dynamic> toJson() => {
    "@type": type,
    "valueRequired": valueRequired,
    "valueName": valueName,
  };
}

class TargetClass {
  String type;
  String urlTemplate;

  TargetClass({
    required this.type,
    required this.urlTemplate,
  });

  factory TargetClass.fromJson(Map<String, dynamic> json) => TargetClass(
    type: json["@type"],
    urlTemplate: json["urlTemplate"],
  );

  Map<String, dynamic> toJson() => {
    "@type": type,
    "urlTemplate": urlTemplate,
  };
}

class TwitterMisc {
  String estReadingTime;

  TwitterMisc({
    required this.estReadingTime,
  });

  factory TwitterMisc.fromJson(Map<String, dynamic> json) => TwitterMisc(
    estReadingTime: json["Est. reading time"],
  );

  Map<String, dynamic> toJson() => {
    "Est. reading time": estReadingTime,
  };
}
