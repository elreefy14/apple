import 'package:bloc/bloc.dart';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:meta/meta.dart';
import '../../../../core/services/data/auth_service.dart';

part 'login_state.dart';

class LoginCubit extends Cubit<LoginState> {
  LoginCubit({
    required this.authService,
  }) : super(LoginInitial());

  static LoginCubit get(context) => BlocProvider.of(context);

  final AuthService authService;
  GlobalKey<FormState> formKey = GlobalKey<FormState>();
  AutovalidateMode autoValidateMode = AutovalidateMode.disabled;
  TextEditingController emailController = TextEditingController();
  TextEditingController passwordController = TextEditingController();
  bool isSecure = true;

  iconToggle() {
    isSecure = !isSecure;
    emit(IconToggle());
  }

  void login() async {
    emit(LoginLoading());
    try {
      var result = await authService.login(
        email: emailController.text,
        password: passwordController.text,
      );
      if (result) {
        emit(LoginSuccess());
      }
    } catch (e) {
      if (e is DioException) {
        if (e.response?.statusCode == 401 || e.response?.statusCode == 400) {
          emit(LoginError(message: 'Invalid email or password'));
        }
      }
        emit(LoginError(message: e.toString()));
    }
  }
}
